name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        include:
          - pair:
              elixir: "1.13"
              otp: "22.3.4.27"
              typesense: "0.25.1"
          - pair:
              elixir: "1.16"
              otp: "26.2.3"
              typesense: "0.25.1"
            lint: lint

    env:
      MIX_ENV: test

    steps:
      - name: Check out this repository
        uses: actions/checkout@v4

      - name: Setup Erlang and Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ matrix.pair.otp }}
          elixir-version: ${{ matrix.pair.elixir }}

      - name: Restored cached Mix dependencies (downloaded and compiled)
        uses: actions/cache/restore@v4
        id: restore-mix-deps-cache
        with:
          path: |
            deps
            _build
          key: |
            ${{ runner.os }}-mix-${{ matrix.pair.elixir }}-${{ matrix.pair.otp }}-${{ hashFiles('**/mix.lock') }}-${{ github.run_id }}
            restore-keys: |
            ${{ runner.os }}-mix-${{ matrix.pair.elixir }}-${{ matrix.pair.otp }}-${{ hashFiles('**/mix.lock') }}-
            ${{ runner.os }}-mix-${{ matrix.pair.elixir }}-${{ matrix.pair.otp }}-

      - name: Start Typesense
        uses: jirevwe/typesense-github-action@v1.0.1
        with:
          typesense-version: ${{ matrix.pair.typesense }}
          typesense-api-key: xyz

      - name: Install Dependencies
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get --check-locked
          mix deps.compile

      - name: Cache compiled Mix dependencies
        uses: actions/cache/save@v4
        with:
          path: |
            deps
            _build
          key: ${{ steps.restore-mix-deps-cache.outputs.cache-primary-key }}

      - name: Check for formatted files
        run: mix format --check-formatted
        if: ${{ matrix.lint }}

      - name: Check for Credo issues
        run: mix credo --all --strict
        if: ${{ matrix.lint }}

      - name: Check for unused dependencies
        run: mix deps.unlock --check-unused
        if: ${{ matrix.lint }}

      - name: Check compilation warnings
        run: mix compile --warnings-as-errors
        if: ${{ matrix.lint }}

      - name: Run tests
        run: mix test
